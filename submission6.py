# -*- coding: utf-8 -*-
"""submission6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hD7jtlOOMrX-0Dc9KAC6vawideBOPdrT
"""

! pip install opendatasets

"""Import necessary libraries"""

# Commented out IPython magic to ensure Python compatibility.
import opendatasets as od
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
# %matplotlib inline

import seaborn as sns
plt.style.use('seaborn')

"""Download datasets"""

od.download('https://www.kaggle.com/datasets/prasertk/top-100-rotten-tomatoes-movies-by-genres')

"""Create dataframes"""

movies = pd.read_csv('/content/top-100-rotten-tomatoes-movies-by-genres/top_100_movies_by_genres.csv')

"""## Univariate Exploratory Data Analysis"""

movies

movies.info()

"""# Data Preparation

Check total data unique
"""

movies.nunique()

"""Check missing values"""

movies.isna().sum()

"""Check duplicates"""

movies.duplicated().sum()

print('Jumlah Movies: ', len(movies.Title.unique()))
print('Jumlah Row:', len(movies))

movies_duplicate = movies[movies.duplicated(['Title'], keep=False)]
fix_movies = movies_duplicate.sort_values('Title', ascending=True)
fix_movies

movies.drop_duplicates(subset=['Title'], keep='first', inplace=True)
movies

"""Membuat dataframe baru dengan kolum yang hanya ingin digunakan"""

movies = movies[['Title', 'Genre']]
movies

"""# Model Deployment
### Model Content Based Filtering

TF-IDF Vectorizer
"""

from sklearn.feature_extraction.text import TfidfVectorizer
# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer(stop_words='english')

# Melakukan perhitungan idf pada data movies
tf.fit(movies['Genre']) 
 
# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names_out()

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(movies['Genre']) 
 
# Melihat ukuran matrix tfidf
tfidf_matrix.shape

"""## Cosine Similiraty"""

from sklearn.metrics.pairwise import cosine_similarity

cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

cosine_sim_df = pd.DataFrame(cosine_sim, index=movies['Title'],
                             columns=movies['Title'])
print('Shape:', cosine_sim_df.shape)

cosine_sim_df.sample(10, axis=1).sample(10, axis=0)

"""Fungsi untuk rekomendasi film"""

def MovieRecommendations(movies_title, similarity_data=cosine_sim_df, 
                         items=movies[['Title','Genre']], k=10):
  
    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan    
    # Dataframe diubah menjadi numpy
    # Range(start, stop, step)
    index = similarity_data.loc[:, movies_title].to_numpy().argpartition(
        range(-1, -k, -1)
    )

    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]

    # Drop movie_title agar nama movie yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(movies_title, errors='ignore')

    return pd.DataFrame(closest).merge(items).head(k)

# Tes melihat genre dari sebuah movie
find_title = movies[movies['Title'] == '1917 (2020)']
find_title

movie_title = '1917 (2020)'
movie_recomend = MovieRecommendations(movie_title)
movie_recomend